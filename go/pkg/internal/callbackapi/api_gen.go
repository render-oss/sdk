// Package callbackapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package callbackapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/go-chi/chi/v5"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// CallbackRequest defines model for CallbackRequest.
type CallbackRequest struct {
	Complete *TaskComplete `json:"complete,omitempty"`
	Error    *TaskError    `json:"error,omitempty"`
}

// InputResponse defines model for InputResponse.
type InputResponse struct {
	Input    []byte `json:"input"`
	TaskName string `json:"task_name"`
}

// RetryConfig defines model for RetryConfig.
type RetryConfig struct {
	// Factor Backoff factor for exponential retry
	Factor *float32 `json:"factor,omitempty"`

	// MaxRetries Maximum number of retry attempts
	MaxRetries *int `json:"max_retries,omitempty"`

	// WaitDurationMs Initial wait duration between retries (in milliseconds)
	WaitDurationMs *int64 `json:"wait_duration_ms,omitempty"`
}

// RunSubtaskRequest defines model for RunSubtaskRequest.
type RunSubtaskRequest struct {
	Input    *[]byte `json:"input,omitempty"`
	TaskName string  `json:"task_name"`
}

// RunSubtaskResponse defines model for RunSubtaskResponse.
type RunSubtaskResponse struct {
	TaskRunId string `json:"task_run_id"`
}

// SubtaskResultRequest defines model for SubtaskResultRequest.
type SubtaskResultRequest struct {
	TaskRunId string `json:"task_run_id"`
}

// SubtaskResultResponse defines model for SubtaskResultResponse.
type SubtaskResultResponse struct {
	Complete     *TaskComplete `json:"complete,omitempty"`
	Error        *TaskError    `json:"error,omitempty"`
	StillRunning bool          `json:"still_running"`
}

// Task defines model for Task.
type Task struct {
	Name    string       `json:"name"`
	Options *TaskOptions `json:"options,omitempty"`
}

// TaskComplete defines model for TaskComplete.
type TaskComplete struct {
	Output []byte `json:"output"`
}

// TaskError defines model for TaskError.
type TaskError struct {
	Details    string  `json:"details"`
	StackTrace *string `json:"stack_trace,omitempty"`
}

// TaskOptions defines model for TaskOptions.
type TaskOptions struct {
	Retry *RetryConfig `json:"retry,omitempty"`
}

// Tasks defines model for Tasks.
type Tasks struct {
	Tasks []Task `json:"tasks"`
}

// PostCallbackJSONRequestBody defines body for PostCallback for application/json ContentType.
type PostCallbackJSONRequestBody = CallbackRequest

// PostGetSubtaskResultJSONRequestBody defines body for PostGetSubtaskResult for application/json ContentType.
type PostGetSubtaskResultJSONRequestBody = SubtaskResultRequest

// PostRegisterTasksJSONRequestBody defines body for PostRegisterTasks for application/json ContentType.
type PostRegisterTasksJSONRequestBody = Tasks

// PostRunSubtaskJSONRequestBody defines body for PostRunSubtask for application/json ContentType.
type PostRunSubtaskJSONRequestBody = RunSubtaskRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostCallbackWithBody request with any body
	PostCallbackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCallback(ctx context.Context, body PostCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGetSubtaskResultWithBody request with any body
	PostGetSubtaskResultWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGetSubtaskResult(ctx context.Context, body PostGetSubtaskResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInput request
	GetInput(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRegisterTasksWithBody request with any body
	PostRegisterTasksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRegisterTasks(ctx context.Context, body PostRegisterTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRunSubtaskWithBody request with any body
	PostRunSubtaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRunSubtask(ctx context.Context, body PostRunSubtaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostCallbackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallbackRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallback(ctx context.Context, body PostCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallbackRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetSubtaskResultWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetSubtaskResultRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGetSubtaskResult(ctx context.Context, body PostGetSubtaskResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGetSubtaskResultRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInput(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInputRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegisterTasksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegisterTasksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegisterTasks(ctx context.Context, body PostRegisterTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegisterTasksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRunSubtaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRunSubtaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRunSubtask(ctx context.Context, body PostRunSubtaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRunSubtaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostCallbackRequest calls the generic PostCallback builder with application/json body
func NewPostCallbackRequest(server string, body PostCallbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCallbackRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCallbackRequestWithBody generates requests for PostCallback with any type of body
func NewPostCallbackRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/callback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGetSubtaskResultRequest calls the generic PostGetSubtaskResult builder with application/json body
func NewPostGetSubtaskResultRequest(server string, body PostGetSubtaskResultJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGetSubtaskResultRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGetSubtaskResultRequestWithBody generates requests for PostGetSubtaskResult with any type of body
func NewPostGetSubtaskResultRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/get-subtask-result")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInputRequest generates requests for GetInput
func NewGetInputRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/input")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRegisterTasksRequest calls the generic PostRegisterTasks builder with application/json body
func NewPostRegisterTasksRequest(server string, body PostRegisterTasksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRegisterTasksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRegisterTasksRequestWithBody generates requests for PostRegisterTasks with any type of body
func NewPostRegisterTasksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register-tasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRunSubtaskRequest calls the generic PostRunSubtask builder with application/json body
func NewPostRunSubtaskRequest(server string, body PostRunSubtaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRunSubtaskRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRunSubtaskRequestWithBody generates requests for PostRunSubtask with any type of body
func NewPostRunSubtaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/run-subtask")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostCallbackWithBodyWithResponse request with any body
	PostCallbackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCallbackResponse, error)

	PostCallbackWithResponse(ctx context.Context, body PostCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCallbackResponse, error)

	// PostGetSubtaskResultWithBodyWithResponse request with any body
	PostGetSubtaskResultWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetSubtaskResultResponse, error)

	PostGetSubtaskResultWithResponse(ctx context.Context, body PostGetSubtaskResultJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetSubtaskResultResponse, error)

	// GetInputWithResponse request
	GetInputWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInputResponse, error)

	// PostRegisterTasksWithBodyWithResponse request with any body
	PostRegisterTasksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegisterTasksResponse, error)

	PostRegisterTasksWithResponse(ctx context.Context, body PostRegisterTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegisterTasksResponse, error)

	// PostRunSubtaskWithBodyWithResponse request with any body
	PostRunSubtaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRunSubtaskResponse, error)

	PostRunSubtaskWithResponse(ctx context.Context, body PostRunSubtaskJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRunSubtaskResponse, error)
}

type PostCallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGetSubtaskResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubtaskResultResponse
}

// Status returns HTTPResponse.Status
func (r PostGetSubtaskResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGetSubtaskResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInputResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InputResponse
}

// Status returns HTTPResponse.Status
func (r GetInputResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInputResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRegisterTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRegisterTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRegisterTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRunSubtaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RunSubtaskResponse
}

// Status returns HTTPResponse.Status
func (r PostRunSubtaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRunSubtaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostCallbackWithBodyWithResponse request with arbitrary body returning *PostCallbackResponse
func (c *ClientWithResponses) PostCallbackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCallbackResponse, error) {
	rsp, err := c.PostCallbackWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallbackResponse(rsp)
}

func (c *ClientWithResponses) PostCallbackWithResponse(ctx context.Context, body PostCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCallbackResponse, error) {
	rsp, err := c.PostCallback(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallbackResponse(rsp)
}

// PostGetSubtaskResultWithBodyWithResponse request with arbitrary body returning *PostGetSubtaskResultResponse
func (c *ClientWithResponses) PostGetSubtaskResultWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGetSubtaskResultResponse, error) {
	rsp, err := c.PostGetSubtaskResultWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetSubtaskResultResponse(rsp)
}

func (c *ClientWithResponses) PostGetSubtaskResultWithResponse(ctx context.Context, body PostGetSubtaskResultJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGetSubtaskResultResponse, error) {
	rsp, err := c.PostGetSubtaskResult(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGetSubtaskResultResponse(rsp)
}

// GetInputWithResponse request returning *GetInputResponse
func (c *ClientWithResponses) GetInputWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInputResponse, error) {
	rsp, err := c.GetInput(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInputResponse(rsp)
}

// PostRegisterTasksWithBodyWithResponse request with arbitrary body returning *PostRegisterTasksResponse
func (c *ClientWithResponses) PostRegisterTasksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegisterTasksResponse, error) {
	rsp, err := c.PostRegisterTasksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegisterTasksResponse(rsp)
}

func (c *ClientWithResponses) PostRegisterTasksWithResponse(ctx context.Context, body PostRegisterTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegisterTasksResponse, error) {
	rsp, err := c.PostRegisterTasks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegisterTasksResponse(rsp)
}

// PostRunSubtaskWithBodyWithResponse request with arbitrary body returning *PostRunSubtaskResponse
func (c *ClientWithResponses) PostRunSubtaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRunSubtaskResponse, error) {
	rsp, err := c.PostRunSubtaskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRunSubtaskResponse(rsp)
}

func (c *ClientWithResponses) PostRunSubtaskWithResponse(ctx context.Context, body PostRunSubtaskJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRunSubtaskResponse, error) {
	rsp, err := c.PostRunSubtask(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRunSubtaskResponse(rsp)
}

// ParsePostCallbackResponse parses an HTTP response from a PostCallbackWithResponse call
func ParsePostCallbackResponse(rsp *http.Response) (*PostCallbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostGetSubtaskResultResponse parses an HTTP response from a PostGetSubtaskResultWithResponse call
func ParsePostGetSubtaskResultResponse(rsp *http.Response) (*PostGetSubtaskResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGetSubtaskResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubtaskResultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInputResponse parses an HTTP response from a GetInputWithResponse call
func ParseGetInputResponse(rsp *http.Response) (*GetInputResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInputResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InputResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRegisterTasksResponse parses an HTTP response from a PostRegisterTasksWithResponse call
func ParsePostRegisterTasksResponse(rsp *http.Response) (*PostRegisterTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRegisterTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRunSubtaskResponse parses an HTTP response from a PostRunSubtaskWithResponse call
func ParsePostRunSubtaskResponse(rsp *http.Response) (*PostRunSubtaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRunSubtaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RunSubtaskResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Receive a callback from a workflow
	// (POST /callback)
	PostCallback(w http.ResponseWriter, r *http.Request)
	// Fetch the results for a subtask
	// (POST /get-subtask-result)
	PostGetSubtaskResult(w http.ResponseWriter, r *http.Request)
	// Get the task name and input for a task run
	// (GET /input)
	GetInput(w http.ResponseWriter, r *http.Request)
	// Publish registered tasks
	// (POST /register-tasks)
	PostRegisterTasks(w http.ResponseWriter, r *http.Request)
	// Trigger a subtask
	// (POST /run-subtask)
	PostRunSubtask(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Receive a callback from a workflow
// (POST /callback)
func (_ Unimplemented) PostCallback(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch the results for a subtask
// (POST /get-subtask-result)
func (_ Unimplemented) PostGetSubtaskResult(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the task name and input for a task run
// (GET /input)
func (_ Unimplemented) GetInput(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Publish registered tasks
// (POST /register-tasks)
func (_ Unimplemented) PostRegisterTasks(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Trigger a subtask
// (POST /run-subtask)
func (_ Unimplemented) PostRunSubtask(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostCallback operation middleware
func (siw *ServerInterfaceWrapper) PostCallback(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCallback(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostGetSubtaskResult operation middleware
func (siw *ServerInterfaceWrapper) PostGetSubtaskResult(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostGetSubtaskResult(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetInput operation middleware
func (siw *ServerInterfaceWrapper) GetInput(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInput(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostRegisterTasks operation middleware
func (siw *ServerInterfaceWrapper) PostRegisterTasks(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRegisterTasks(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostRunSubtask operation middleware
func (siw *ServerInterfaceWrapper) PostRunSubtask(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRunSubtask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/callback", wrapper.PostCallback)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/get-subtask-result", wrapper.PostGetSubtaskResult)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/input", wrapper.GetInput)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/register-tasks", wrapper.PostRegisterTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/run-subtask", wrapper.PostRunSubtask)
	})

	return r
}

type PostCallbackRequestObject struct {
	Body *PostCallbackJSONRequestBody
}

type PostCallbackResponseObject interface {
	VisitPostCallbackResponse(w http.ResponseWriter) error
}

type PostCallback200Response struct {
}

func (response PostCallback200Response) VisitPostCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCallback400Response struct {
}

func (response PostCallback400Response) VisitPostCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostCallback401Response struct {
}

func (response PostCallback401Response) VisitPostCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostCallback403Response struct {
}

func (response PostCallback403Response) VisitPostCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type PostCallback500Response struct {
}

func (response PostCallback500Response) VisitPostCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostGetSubtaskResultRequestObject struct {
	Body *PostGetSubtaskResultJSONRequestBody
}

type PostGetSubtaskResultResponseObject interface {
	VisitPostGetSubtaskResultResponse(w http.ResponseWriter) error
}

type PostGetSubtaskResult200JSONResponse SubtaskResultResponse

func (response PostGetSubtaskResult200JSONResponse) VisitPostGetSubtaskResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostGetSubtaskResult500Response struct {
}

func (response PostGetSubtaskResult500Response) VisitPostGetSubtaskResultResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetInputRequestObject struct {
}

type GetInputResponseObject interface {
	VisitGetInputResponse(w http.ResponseWriter) error
}

type GetInput200JSONResponse InputResponse

func (response GetInput200JSONResponse) VisitGetInputResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetInput500Response struct {
}

func (response GetInput500Response) VisitGetInputResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostRegisterTasksRequestObject struct {
	Body *PostRegisterTasksJSONRequestBody
}

type PostRegisterTasksResponseObject interface {
	VisitPostRegisterTasksResponse(w http.ResponseWriter) error
}

type PostRegisterTasks200Response struct {
}

func (response PostRegisterTasks200Response) VisitPostRegisterTasksResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostRegisterTasks400Response struct {
}

func (response PostRegisterTasks400Response) VisitPostRegisterTasksResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostRegisterTasks500Response struct {
}

func (response PostRegisterTasks500Response) VisitPostRegisterTasksResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostRunSubtaskRequestObject struct {
	Body *PostRunSubtaskJSONRequestBody
}

type PostRunSubtaskResponseObject interface {
	VisitPostRunSubtaskResponse(w http.ResponseWriter) error
}

type PostRunSubtask200JSONResponse RunSubtaskResponse

func (response PostRunSubtask200JSONResponse) VisitPostRunSubtaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostRunSubtask500Response struct {
}

func (response PostRunSubtask500Response) VisitPostRunSubtaskResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Receive a callback from a workflow
	// (POST /callback)
	PostCallback(ctx context.Context, request PostCallbackRequestObject) (PostCallbackResponseObject, error)
	// Fetch the results for a subtask
	// (POST /get-subtask-result)
	PostGetSubtaskResult(ctx context.Context, request PostGetSubtaskResultRequestObject) (PostGetSubtaskResultResponseObject, error)
	// Get the task name and input for a task run
	// (GET /input)
	GetInput(ctx context.Context, request GetInputRequestObject) (GetInputResponseObject, error)
	// Publish registered tasks
	// (POST /register-tasks)
	PostRegisterTasks(ctx context.Context, request PostRegisterTasksRequestObject) (PostRegisterTasksResponseObject, error)
	// Trigger a subtask
	// (POST /run-subtask)
	PostRunSubtask(ctx context.Context, request PostRunSubtaskRequestObject) (PostRunSubtaskResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostCallback operation middleware
func (sh *strictHandler) PostCallback(w http.ResponseWriter, r *http.Request) {
	var request PostCallbackRequestObject

	var body PostCallbackJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCallback(ctx, request.(PostCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCallback")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCallbackResponseObject); ok {
		if err := validResponse.VisitPostCallbackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostGetSubtaskResult operation middleware
func (sh *strictHandler) PostGetSubtaskResult(w http.ResponseWriter, r *http.Request) {
	var request PostGetSubtaskResultRequestObject

	var body PostGetSubtaskResultJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostGetSubtaskResult(ctx, request.(PostGetSubtaskResultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostGetSubtaskResult")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostGetSubtaskResultResponseObject); ok {
		if err := validResponse.VisitPostGetSubtaskResultResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetInput operation middleware
func (sh *strictHandler) GetInput(w http.ResponseWriter, r *http.Request) {
	var request GetInputRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetInput(ctx, request.(GetInputRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetInput")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetInputResponseObject); ok {
		if err := validResponse.VisitGetInputResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRegisterTasks operation middleware
func (sh *strictHandler) PostRegisterTasks(w http.ResponseWriter, r *http.Request) {
	var request PostRegisterTasksRequestObject

	var body PostRegisterTasksJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRegisterTasks(ctx, request.(PostRegisterTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRegisterTasks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRegisterTasksResponseObject); ok {
		if err := validResponse.VisitPostRegisterTasksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRunSubtask operation middleware
func (sh *strictHandler) PostRunSubtask(w http.ResponseWriter, r *http.Request) {
	var request PostRunSubtaskRequestObject

	var body PostRunSubtaskJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRunSubtask(ctx, request.(PostRunSubtaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRunSubtask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRunSubtaskResponseObject); ok {
		if err := validResponse.VisitPostRunSubtaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
