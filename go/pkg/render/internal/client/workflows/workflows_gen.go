// This file has been generated from our REST API schema. Do not edit it manually
// For more details, see the readme at https://github.com/renderinc/public-api-schema

// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"time"
)

// Defines values for Region.
const (
	Frankfurt Region = "frankfurt"
	Ohio      Region = "ohio"
	Oregon    Region = "oregon"
	Singapore Region = "singapore"
	Virginia  Region = "virginia"
)

// Defines values for Runtime.
const (
	Elixir Runtime = "elixir"
	Go     Runtime = "go"
	Node   Runtime = "node"
	Python Runtime = "python"
	Ruby   Runtime = "ruby"
)

// Defines values for TaskRunStatus.
const (
	Completed TaskRunStatus = "completed"
	Failed    TaskRunStatus = "failed"
	Pending   TaskRunStatus = "pending"
	Running   TaskRunStatus = "running"
)

// BuildConfig defines model for BuildConfig.
type BuildConfig struct {
	// Branch The branch to use for the build, if applicable.
	Branch *string `json:"branch,omitempty"`

	// BuildCommand The command to run to build the workflow.
	BuildCommand string `json:"buildCommand"`

	// Repo The repository URL to use for the build.
	Repo string `json:"repo"`

	// RootDir The root directory of the repository to use for the build, if applicable.
	RootDir *string `json:"rootDir,omitempty"`

	// Runtime The runtime environment for the workflow (e.g., node, python, etc.).
	Runtime Runtime `json:"runtime"`
}

// Image defines model for Image.
type Image struct {
	// ImagePath Path to the image used for this server (e.g docker.io/library/nginx:latest).
	ImagePath string `json:"imagePath"`

	// RegistryCredentialId Optional reference to the registry credential passed to the image repository to retrieve this image.
	RegistryCredentialId *string `json:"registryCredentialId,omitempty"`
}

// ImageVersion defines model for ImageVersion.
type ImageVersion struct {
	// ImagePath Path to the image used for this server (e.g docker.io/library/nginx:latest).
	ImagePath string `json:"imagePath"`

	// RegistryCredentialId Optional reference to the registry credential passed to the image repository to retrieve this image.
	RegistryCredentialId *string `json:"registryCredentialId,omitempty"`

	// Sha SHA that the image reference was resolved to when creating the workflow version.
	Sha string `json:"sha"`
}

// Region Defaults to "oregon"
type Region string

// RunTask defines model for RunTask.
type RunTask struct {
	Input TaskData `json:"input"`

	// Task Either a task ID or a workflow slug with task name and optional version. If a version is not provided, the latest version of the task will be used.
	Task TaskIdentifier `json:"task"`
}

// Runtime The runtime environment for the workflow (e.g., node, python, etc.).
type Runtime string

// Task defines model for Task.
type Task struct {
	CreatedAt time.Time `json:"createdAt"`
	Id        string    `json:"id"`
	Name      string    `json:"name"`
}

// TaskData defines model for TaskData.
type TaskData = []interface{}

// TaskIdentifier Either a task ID or a workflow slug with task name and optional version. If a version is not provided, the latest version of the task will be used.
type TaskIdentifier = string

// TaskRun defines model for TaskRun.
type TaskRun struct {
	CompletedAt *time.Time    `json:"completedAt,omitempty"`
	Id          string        `json:"id"`
	StartedAt   *time.Time    `json:"startedAt,omitempty"`
	Status      TaskRunStatus `json:"status"`
	TaskId      string        `json:"taskId"`
}

// TaskRunDetails defines model for TaskRunDetails.
type TaskRunDetails struct {
	CompletedAt *time.Time `json:"completedAt,omitempty"`

	// Error Error message if the task run failed.
	Error     *string       `json:"error,omitempty"`
	Id        string        `json:"id"`
	Results   TaskRunResult `json:"results"`
	StartedAt *time.Time    `json:"startedAt,omitempty"`
	Status    TaskRunStatus `json:"status"`
	TaskId    string        `json:"taskId"`
}

// TaskRunResult defines model for TaskRunResult.
type TaskRunResult = []interface{}

// TaskRunStatus defines model for TaskRunStatus.
type TaskRunStatus string

// TaskSlug defines model for TaskSlug.
type TaskSlug struct {
	TaskName            string  `json:"taskName"`
	Version             *string `json:"version,omitempty"`
	WorkflowServiceSlug string  `json:"workflowServiceSlug"`
}

// Workflow defines model for Workflow.
type Workflow struct {
	BuildConfig *BuildConfig `json:"buildConfig,omitempty"`
	CreatedAt   time.Time    `json:"createdAt"`
	Id          string       `json:"id"`
	Image       *Image       `json:"image,omitempty"`
	Name        string       `json:"name"`
	OwnerId     string       `json:"ownerId"`

	// Region Defaults to "oregon"
	Region Region `json:"region"`

	// RunCommand Command to run the workflow.
	RunCommand *string   `json:"runCommand,omitempty"`
	UpdatedAt  time.Time `json:"updatedAt"`
}

// WorkflowCreate defines model for WorkflowCreate.
type WorkflowCreate struct {
	BuildConfig *BuildConfig `json:"buildConfig,omitempty"`
	Image       *Image       `json:"image,omitempty"`
	Name        string       `json:"name"`
	OwnerId     string       `json:"ownerId"`

	// Region Defaults to "oregon"
	Region Region `json:"region"`

	// RunCommand The command to run the workflow
	RunCommand *string `json:"runCommand,omitempty"`
}

// WorkflowUpdate defines model for WorkflowUpdate.
type WorkflowUpdate struct {
	BuildConfig *BuildConfig `json:"buildConfig,omitempty"`
	Image       *Image       `json:"image,omitempty"`
	Name        *string      `json:"name,omitempty"`

	// RunCommand The command to run the workflow
	RunCommand *string `json:"runCommand,omitempty"`
}

// WorkflowVersion defines model for WorkflowVersion.
type WorkflowVersion struct {
	CreatedAt  time.Time    `json:"createdAt"`
	Id         string       `json:"id"`
	Image      ImageVersion `json:"image"`
	Name       string       `json:"name"`
	WorkflowId string       `json:"workflowId"`
}

// TaskIDParam defines model for TaskIDParam.
type TaskIDParam = string

// TaskIdFilterParam defines model for TaskIdFilterParam.
type TaskIdFilterParam = []string

// TaskRunIDParam defines model for TaskRunIDParam.
type TaskRunIDParam = string

// WorkflowIDParam defines model for WorkflowIDParam.
type WorkflowIDParam = string

// WorkflowVersionIDParam defines model for WorkflowVersionIDParam.
type WorkflowVersionIDParam = string
